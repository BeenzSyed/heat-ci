heat_template_version: 2013-05-23

description: |
  Test template using all resources supported on the Rackspace Public Cloud

parameters:

  domain_name:
    type: string
    description: DNS Domain name

  db_pass:
    type: string
    hidden: true
    description: Database access password
    default: secrete

  devops_flavor:
    type: string
    description: Flavor name for the devops server
    default: 4 GB Performance
    constraints:
    - allowed_values:
      - 4 GB Performance
      - 4GB Standard Instance

  api_flavor_ref:
    type: string
    description: API Servers flavor id
    default: performance1-1
    constraints:
    - allowed_values:
      - performance1-1
      - "3" # 1GB Standard Instance

resources:

  random_key_name:
    type: OS::Heat::RandomString
    properties:
      length: 8

  access_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_resource: random_key_name }
      save_private_key: true

  priv_network:
    type: Rackspace::Cloud::Network
    properties:
      label: kitchen_sink
      cidr: 192.168.0.0/24

  devops_server:
    type: OS::Nova::Server
    properties:
      name: kitchen_sink_ops01
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      image: 042395fc-728c-4763-86f9-9b0cacb00701 #CentOS 6.5
      flavor: { get_param: devops_flavor }
      key_name: { get_resource: access_key }
      networks:
      - uuid: "00000000-0000-0000-0000-000000000000"
      - uuid: "11111111-1111-1111-1111-111111111111"
      - uuid: { get_resource: priv_network }

  devops_chefsolo_berkshelf:
     type: "OS::Heat::ChefSolo"
     depends_on: devops_chefsolo_kitchen_centos
     properties:
         private_key: {get_attr: [access_key, private_key]}
         host: {get_attr: [devops_server, accessIPv4]}
         chef_version: "11.12.0"
         Berksfile: |
            site :opscode
            cookbook 'apt'

         Berksfile.lock: |
            {
              "sources": {
                "apt": {
                  "locked_version": "2.3.8"
                }
              }
            }

         node:
            hello: "hi"

  devops_chefsolo_kitchen_centos:
    type: "OS::Heat::ChefSolo"
    properties:
       private_key: {get_attr: [access_key, private_key]}
       host: {get_attr: [devops_server, accessIPv4]}
       kitchen: "https://github.com/heat-ci/heat-templates.git"
       node:
         hello: "hi"

  devops_volume:
    type: OS::Cinder::Volume
    properties:
      name: kitchen_sink_devops_vol
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      size: 100
      description: Created from the kitchen_sink test Heat template

  attach_devops_vol:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: devops_server }
      volume_id: { get_resource: devops_volume }

  api_servers:
    type: Rackspace::AutoScale::Group
    properties:
      groupConfiguration:
        name: kitchen_sink_api_asgroup
        metadata:
          rax-heat: { get_param: "OS::stack_id" }
        maxEntities: 8
        minEntities: 2
        cooldown: 120
      launchConfiguration:
        type: launch_server
        args:
          loadBalancers:
          - loadBalancerId: { get_resource: api_loadbalancer }
            port: 80
          server:
            name: kitchen_sink_api
            flavorRef: { get_param: api_flavor_ref }
            imageRef: ffd597d6-2cc4-4b43-b8f4-b1006715b84e
            key_name: { get_resource: access_key }
            personality:
                /tmp/testfile: "testfile"
            networks:
            - uuid: "11111111-1111-1111-1111-111111111111"
            - uuid: { get_resource: priv_network }

  api_servers_no_personality:
    type: Rackspace::AutoScale::Group
    properties:
      groupConfiguration:
        name: kitchen_sink_api_asgroup_no_personality
        metadata:
          rax-heat: { get_param: "OS::stack_id" }
        maxEntities: 8
        minEntities: 2
        cooldown: 120
      launchConfiguration:
        type: launch_server
        args:
          loadBalancers:
          - loadBalancerId: { get_resource: api_loadbalancer }
            port: 80
          server:
            name: kitchen_sink_api
            flavorRef: { get_param: api_flavor_ref }
            imageRef: df27d481-63a5-40ca-8920-3d132ed643d9
            key_name: { get_resource: access_key }
            networks:
            - uuid: "11111111-1111-1111-1111-111111111111"
            - uuid: { get_resource: priv_network }

  api_scale_up_policy:
    type: Rackspace::AutoScale::ScalingPolicy
    properties:
      group: { get_resource: api_servers }
      name: Scale up api servers
      change: 1
      cooldown: 600
      type: webhook

  api_scale_up_webhook:
    type: Rackspace::AutoScale::WebHook
    properties:
      name: triggerApiScaleUp
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      policy: { get_resource: api_scale_up_policy }

  api_scale_down_policy:
    type: Rackspace::AutoScale::ScalingPolicy
    properties:
      group: { get_resource: api_servers }
      name: Scale down api servers
      change: -1
      cooldown: 600
      type: webhook

  api_scale_down_webhook:
    type: Rackspace::AutoScale::WebHook
    properties:
      name: triggerApiScaleUp
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      policy: { get_resource: api_scale_down_policy }

  api_loadbalancer:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: kitchen_sink_api_lb
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      protocol: HTTPS
      port: 80
      algorithm: ROUND_ROBIN
      nodes: []
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4

  lb_shared_vip:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: ksink_shared_vip_https
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      protocol: HTTPS
      port: 443
      algorithm: ROUND_ROBIN
      nodes: []
      virtualIps:
      - id: { get_attr: [ api_loadbalancer, virtualIps, 0, id ] }

  service_domain:
    type: Rackspace::Cloud::DNS
    properties:
      name: { get_param: domain_name }
      emailAddress:
        str_replace:
          template: "admin@{domain}"
          params:
            "{domain}": { get_param: domain_name }
      records:
      - name: { get_param: domain_name }
        type: A
        data: { get_attr: [api_loadbalancer, PublicIp] }

  engine_nodes:
    type: OS::Heat::ResourceGroup
    depends_on: service_db
    properties:
      count: 2
      resource_def:
        type: Rackspace::Cloud::Server
        properties:
          name: "kitchen_sink_engine_%index%"
          image: 2936a16d-ee01-452c-a6ab-7117df5196f8  # Ubuntu 13.10 (Saucy Salamander)
          flavor: { get_param: devops_flavor }
          key_name: { get_resource: access_key }
          networks:
          - uuid: { get_resource: priv_network }
          - uuid: "00000000-0000-0000-0000-000000000000"
          - uuid: "11111111-1111-1111-1111-111111111111"
          user_data: |
            #!/bin/bash -x
            echo "hello world" > /root/hello-world.txt

  rs_windows_server:
    type: "Rackspace::Cloud::WinServer"
    properties:
      name: wordpress_windows_server
      flavor: 4GB Standard Instance
      image: Windows Server 2012
      user_data: |
        $source = "http://download.microsoft.com/download/7/0/4/704CEB4C-9F42-4962-A2B0-5C84B0682C7A/WebPlatformInstaller_amd64_en-US.msi"
        $destination = "webpi.msi"
        $wc = New-Object System.Net.WebClient
        $wc.DownloadFile($source, $destination)

  service_db:
    type: OS::Trove::Instance
    properties:
      name: kitchen_sink_db
      flavor: 1GB Instance
      size: 10
      databases:
      - name: kitchen_sink_data
      users:
      - name: kitchen_sink
        password: { get_param: db_pass }
        databases: [ kitchen_sink_data ]

  # This needs a special image in your catalog to use metadata and user data; basic
  # test here to make sure we can actually pop the server
  aws_server:
    type: AWS::EC2::Instance
    properties:
      ImageId: 2936a16d-ee01-452c-a6ab-7117df5196f8  # Ubuntu 13.10 (Saucy Salamander)
      InstanceType: { get_param: devops_flavor }
      KeyName: { get_resource: access_key }

  object_store:
    type: OS::Swift::Container
    properties:
      name: { get_resource: random_key_name }

  ElasticLoadBalancer:
        type: AWS::ElasticLoadBalancing::LoadBalancer
        properties:
            AvailabilityZones: []
            Instances:
            - "192.168.6.100"
            - "192.168.6.101"
            Listeners: [{
                LoadBalancerPort: 8945,
                InstancePort: 80,
                Protocol: "HTTP"
            }]
            HealthCheck:
                Target: "HTTP:80/"
                HealthyThreshold: 3
                UnhealthyThreshold: 10
                Interval: 10
                Timeout: 60

  provider_resource:
    type: https://raw.githubusercontent.com/heat-ci/heat-templates/master/dev/provider_resource.template
    properties:
      flavor: { get_param: devops_flavor }
      image: 2936a16d-ee01-452c-a6ab-7117df5196f8  # Ubuntu 13.10 (Saucy Salamander)
      key_name: { get_resource: access_key }

outputs:

  "Private Network ID":
    value: { get_resource: priv_network }
    description: Private Network ID

  "Random String":
    value: { get_attr: [ random_key_name, value ] }
    description: Random String

  "Swift Container ID":
    value: { get_resource: object_store }
    description: Swift Container ID

  "Dev Ops Server ID":
    value: { get_resource: devops_server }
    description: Dev Ops Server ID

  "Dev Ops Volume ID":
    value: { get_resource: devops_volume }
    description: Dev Ops Volume ID

  "API servers auto scale group ID":
    value: { get_resource: api_servers }
    description: API servers auto scale group ID

  "API servers auto scale group ID":
    value: { get_resource: api_servers_no_personality }
    description: API servers auto scale group ID

  "Scale UP API servers webhook":
    value: { get_attr: [ api_scale_up_webhook, executeUrl ] }
    description: Scale UP API servers webhook

  "Scale DOWN API servers webhook":
    value: { get_attr: [ api_scale_down_webhook, executeUrl ] }
    description: Scale DOWN API servers webhook

  "Load Balancer ID":
    value: { get_resource: api_loadbalancer }
    description: Load Balancer ID

  "Load Balancer IP":
    value: { get_attr: [ api_loadbalancer, PublicIp ] }
    description: Load Balancer IP

  "DNS Domain ID":
    value: { get_resource: service_domain }
    description: DNS Domain ID

  "Engine Node IDs":
    value: { get_attr: [ engine_nodes, refs ] }
    description: Engine Node IDs

  "DB ID":
    value: { get_resource: service_db }
    description: Database instance ID

  "Access Private Key":
    value: { get_attr: [ access_key, private_key ] }
    description: SSH access private key

  "AWS Server ID":
    value: { get_resource: aws_server }
    description: ID of the AWS::EC2::Instance resource

  "Windows Server IP":
    value: { get_attr: [ rs_windows_server, accessIPv4 ] }
    description: Windows Server IP
