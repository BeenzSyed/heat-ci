heat_template_version: 2013-05-23

description: |
  Test template using all resources supported on the Rackspace Public Cloud

parameters:

  db_pass:
    type: string
    hidden: true
    description: Database access password
    default: secrete

  devops_flavor:
    type: string
    description: Flavor name for the devops server
    default: 4 GB Performance
    constraints:
    - allowed_values:
      - 4 GB Performance
      - 4GB Standard Instance

  api_flavor_ref:
    type: string
    description: API Servers flavor id
    default: performance1-1
    constraints:
    - allowed_values:
      - performance1-1
      - "3" # 1GB Standard Instance

resources:

  random_key_name:
    type: OS::Heat::RandomString
    properties:
      length: 8

  access_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_resource: random_key_name }
      save_private_key: true

  domain_name:
    type: OS::Heat::RandomString

  priv_network:
    type: Rackspace::Cloud::Network
    properties:
      label: kitchen_sink
      cidr: 192.168.0.0/24

  devops_server:
    type: OS::Nova::Server
    properties:
      name: kitchen_sink_ops01
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      image: 042395fc-728c-4763-86f9-9b0cacb00701 #CentOS 6.5
      flavor: { get_param: devops_flavor }
      key_name: { get_resource: access_key }
      networks:
      - uuid: "00000000-0000-0000-0000-000000000000"
      - uuid: "11111111-1111-1111-1111-111111111111"
      - uuid: { get_resource: priv_network }

  devops_chefsolo_kitchen_centos:
    type: "OS::Heat::ChefSolo"
    properties:
       private_key: {get_attr: [access_key, private_key]}
       host: {get_attr: [devops_server, accessIPv4]}
       kitchen: "https://github.com/rackerlabs/heat-ci.git"
       node:
         hello: "hi"

  api_loadbalancer:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: kitchen_sink_api_lb
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      protocol: HTTPS
      port: 80
      algorithm: ROUND_ROBIN
      nodes: []
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4

  lb_shared_vip:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: ksink_shared_vip_https
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      protocol: HTTPS
      port: 443
      algorithm: ROUND_ROBIN
      nodes: []
      virtualIps:
      - id: { get_attr: [ api_loadbalancer, virtualIps, 0, id ] }

  http_redir_lb:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name:
        str_replace:
          template: "stack-redir-lb"
          params:
            stack: { get_param: "OS::stack_name" }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      protocol: HTTPS
      port: 443
      httpsRedirect: true
      algorithm: ROUND_ROBIN
      nodes: []
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4
  
  wait_on_server:
    type: OS::Heat::SwiftSignal
    properties:
      handle: {get_resource: wait_handle}
      count: 5
      timeout: 600

  wait_handle:
    type: OS::Heat::SwiftSignalHandle

  instance1:
    type: OS::Nova::Server
    properties:
      image: 4b14a92e-84c8-4770-9245-91ecb8501cc2  # CentOS
      flavor: 1 GB Performance
      key_name: { get_resource: access_key }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        heat-stack-name: { get_param: "OS::stack_name" }
      config_drive: True
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -x
            # Below are some examples of the various ways signals
            # can be sent to the Handle resource

            # Simple success signal
            wc_notify --data-binary '{"status": "SUCCESS"}'

            # Or you optionally can specify any of the additional fields
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal2"}'
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal3", "data": "data3"}'
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "signal4", "data": "data4"}'

            # If you require control of the ID, you can pass it.
            # The ID should be unique, unless you intend for duplicate
            # signals to overrite each other.  The following two calls
            # do the exact same thing, and will be treated as one signal
            # (You can prove this by changing count above to 7)
            wc_notify --data-binary '{"status": "SUCCESS", "id": "5"}'
            wc_notify --data-binary '{"status": "SUCCESS", "id": "5"}'

            # Example of sending a failure signal, optionally
            # reason, id, and data can be specified as above
            # wc_notify --data-binary '{"status": "FAILURE"}'

          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

  service_domain:
    type: Rackspace::Cloud::DNS
    depends_on: wait_on_server
    properties:
      name:
        str_replace:
          template: "a%domain%.com"
          params:
            "%domain%": { get_resource: domain_name }
      emailAddress:
        str_replace:
          template: "admin@{domain}"
          params:
            "{domain}":
              str_replace:
                template: "a%domain%.com"
                params:
                  "%domain%": { get_resource: domain_name }
      records:
      - name:
          str_replace:
            template: "a%domain%.com"
            params:
              "%domain%": { get_resource: domain_name }
        type: A
        data: { get_attr: [api_loadbalancer, PublicIp] }

outputs:

  "Private Network ID":
    value: { get_resource: priv_network }
    description: Private Network ID

  "Neutron Network":
    value: { get_resource: neutron_network }
  
  "Wait Condition data":
     value: { get_attr: [ wait_on_server, data ] }

  "Random String":
    value: { get_attr: [ random_key_name, value ] }
    description: Random String

  "Dev Ops Server ID":
    value: { get_resource: devops_server }
    description: Dev Ops Server ID

  "Load Balancer ID":
    value: { get_resource: api_loadbalancer }
    description: Load Balancer ID

  "Load Balancer IP":
    value: { get_attr: [ api_loadbalancer, PublicIp ] }
    description: Load Balancer IP

  "DNS Domain ID":
    value: { get_resource: service_domain }
    description: DNS Domain ID

  "Access Private Key":
    value: { get_attr: [ access_key, private_key ] }
    description: SSH access private key